{
    "sourceFile": "src/components/snr_management/FormCompiler.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756834834019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756834834019,
            "name": "Commit-0",
            "content": "// FormCompiler.js - Utility for compiling form designs into HTML, CSS, and JS\r\n\r\n/**\r\n * Generate auto CSS for the form\r\n */\r\nexport const generateFormCSS = (fields) => {\r\n  // CSS is generic and works for both single-step and multi-step forms\r\n  \r\n  return `\r\n    /* Auto-generated Form CSS */\r\n    .dynamic-form-container {\r\n      max-width: 800px;\r\n      margin: 0 auto;\r\n      padding: 20px;\r\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n      background: #ffffff;\r\n      border-radius: 12px;\r\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n    }\r\n    \r\n    .form-step {\r\n      display: none;\r\n      animation: fadeIn 0.3s ease-in-out;\r\n    }\r\n    \r\n    .form-step.active {\r\n      display: block;\r\n    }\r\n    \r\n    @keyframes fadeIn {\r\n      from { opacity: 0; transform: translateY(10px); }\r\n      to { opacity: 1; transform: translateY(0); }\r\n    }\r\n    \r\n    .form-group {\r\n      margin-bottom: 20px;\r\n    }\r\n    \r\n    .form-group label {\r\n      display: block;\r\n      margin-bottom: 8px;\r\n      font-weight: 600;\r\n      color: #374151;\r\n      font-size: 14px;\r\n    }\r\n    \r\n    .form-group input,\r\n    .form-group select,\r\n    .form-group textarea {\r\n      width: 100%;\r\n      padding: 12px 16px;\r\n      border: 2px solid #e5e7eb;\r\n      border-radius: 8px;\r\n      font-size: 16px;\r\n      transition: all 0.2s ease;\r\n      box-sizing: border-box;\r\n    }\r\n    \r\n    .form-group input:focus,\r\n    .form-group select:focus,\r\n    .form-group textarea:focus {\r\n      outline: none;\r\n      border-color: #3b82f6;\r\n      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\r\n    }\r\n    \r\n    .form-group input[type=\"file\"] {\r\n      padding: 8px;\r\n      border: 2px dashed #d1d5db;\r\n      background: #f9fafb;\r\n    }\r\n    \r\n    .form-group input[type=\"file\"]:hover {\r\n      border-color: #3b82f6;\r\n      background: #eff6ff;\r\n    }\r\n    \r\n    .options-group {\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 8px;\r\n    }\r\n    \r\n    .options-horizontal {\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      gap: 16px;\r\n    }\r\n    \r\n    .option-label {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 8px;\r\n      cursor: pointer;\r\n      padding: 8px 12px;\r\n      border-radius: 6px;\r\n      transition: background-color 0.2s ease;\r\n    }\r\n    \r\n    .option-label:hover {\r\n      background-color: #f3f4f6;\r\n    }\r\n    \r\n    .option-label input[type=\"radio\"],\r\n    .option-label input[type=\"checkbox\"] {\r\n      width: auto;\r\n      margin: 0;\r\n    }\r\n    \r\n    .step-indicator {\r\n      text-align: center;\r\n      margin: 20px 0;\r\n      padding: 12px;\r\n      background: #f8fafc;\r\n      border-radius: 8px;\r\n      font-weight: 600;\r\n      color: #64748b;\r\n    }\r\n    \r\n    .step-progress {\r\n      width: 100%;\r\n      height: 4px;\r\n      background: #e5e7eb;\r\n      border-radius: 2px;\r\n      margin: 10px 0;\r\n      overflow: hidden;\r\n    }\r\n    \r\n    .step-progress-bar {\r\n      height: 100%;\r\n      background: linear-gradient(90deg, #3b82f6, #1d4ed8);\r\n      border-radius: 2px;\r\n      transition: width 0.3s ease;\r\n    }\r\n    \r\n    .form-navigation {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      margin-top: 30px;\r\n      padding-top: 20px;\r\n      border-top: 1px solid #e5e7eb;\r\n    }\r\n    \r\n    .nav-button {\r\n      padding: 12px 24px;\r\n      border: none;\r\n      border-radius: 8px;\r\n      font-weight: 600;\r\n      font-size: 16px;\r\n      cursor: pointer;\r\n      transition: all 0.2s ease;\r\n      min-width: 120px;\r\n    }\r\n    \r\n    .nav-button:disabled {\r\n      opacity: 0.5;\r\n      cursor: not-allowed;\r\n    }\r\n    \r\n    .nav-button.back {\r\n      background: #f3f4f6;\r\n      color: #374151;\r\n    }\r\n    \r\n    .nav-button.back:hover:not(:disabled) {\r\n      background: #e5e7eb;\r\n    }\r\n    \r\n    .nav-button.next,\r\n    .nav-button.submit {\r\n      background: linear-gradient(135deg, #3b82f6, #1d4ed8);\r\n      color: white;\r\n    }\r\n    \r\n    .nav-button.next:hover:not(:disabled),\r\n    .nav-button.submit:hover:not(:disabled) {\r\n      background: linear-gradient(135deg, #2563eb, #1e40af);\r\n      transform: translateY(-1px);\r\n      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);\r\n    }\r\n    \r\n    .submit-button {\r\n      background: linear-gradient(135deg, #10b981, #059669);\r\n      color: white;\r\n      padding: 14px 32px;\r\n      border: none;\r\n      border-radius: 8px;\r\n      font-weight: 600;\r\n      font-size: 16px;\r\n      cursor: pointer;\r\n      transition: all 0.2s ease;\r\n      width: 100%;\r\n    }\r\n    \r\n    .submit-button:hover {\r\n      background: linear-gradient(135deg, #059669, #047857);\r\n      transform: translateY(-1px);\r\n      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);\r\n    }\r\n    \r\n    /* Responsive Design */\r\n    @media (max-width: 768px) {\r\n      .dynamic-form-container {\r\n        margin: 10px;\r\n        padding: 16px;\r\n      }\r\n      \r\n      .options-horizontal {\r\n        flex-direction: column;\r\n      }\r\n      \r\n      .form-navigation {\r\n        flex-direction: column;\r\n        gap: 12px;\r\n      }\r\n      \r\n      .nav-button {\r\n        width: 100%;\r\n      }\r\n    }\r\n    \r\n    @media (max-width: 480px) {\r\n      .form-group input,\r\n      .form-group select,\r\n      .form-group textarea {\r\n        font-size: 16px; /* Prevents zoom on iOS */\r\n      }\r\n    }\r\n  `;\r\n};\r\n\r\n/**\r\n * Generate HTML for a single field\r\n */\r\nconst generateFieldHTML = (field) => {\r\n  let fieldHtml = `\r\n    <div class=\"form-group\">\r\n      <label for=\"${field.label.replace(/\\s+/g, '_')}\">${field.label}${field.required ? ' *' : ''}</label>\r\n  `;\r\n  \r\n  switch (field.id) {\r\n    case 'text':\r\n    case 'email':\r\n    case 'url':\r\n    case 'date':\r\n    case 'phone':\r\n    case 'number':\r\n      fieldHtml += `\r\n        <input \r\n          type=\"${field.id}\" \r\n          id=\"${field.label.replace(/\\s+/g, '_')}\" \r\n          name=\"${field.label}\" \r\n          placeholder=\"${field.label}\"\r\n          ${field.required ? 'required' : ''}\r\n        />\r\n      `;\r\n      break;\r\n      \r\n    case 'text_area':\r\n      fieldHtml += `\r\n        <textarea \r\n          id=\"${field.label.replace(/\\s+/g, '_')}\" \r\n          name=\"${field.label}\" \r\n          placeholder=\"${field.label}\"\r\n          rows=\"4\"\r\n          ${field.required ? 'required' : ''}\r\n        ></textarea>\r\n      `;\r\n      break;\r\n      \r\n    case 'radio':\r\n      if (field.options?.choices) {\r\n        fieldHtml += `\r\n          <div class=\"options-${field.options.choices.length <= 3 ? 'horizontal' : 'group'}\">\r\n        `;\r\n        field.options.choices.forEach(choice => {\r\n          fieldHtml += `\r\n            <label class=\"option-label\">\r\n              <input type=\"radio\" name=\"${field.label}\" value=\"${choice}\" ${field.required ? 'required' : ''} />\r\n              ${choice}\r\n            </label>\r\n          `;\r\n        });\r\n        fieldHtml += `</div>`;\r\n      }\r\n      break;\r\n      \r\n    case 'checkbox':\r\n      if (field.options?.choices) {\r\n        fieldHtml += `\r\n          <div class=\"options-${field.options.choices.length <= 3 ? 'horizontal' : 'group'}\">\r\n        `;\r\n        field.options.choices.forEach(choice => {\r\n          fieldHtml += `\r\n            <label class=\"option-label\">\r\n              <input type=\"checkbox\" name=\"${field.label}\" value=\"${choice}\" />\r\n              ${choice}\r\n            </label>\r\n          `;\r\n        });\r\n        fieldHtml += `</div>`;\r\n      }\r\n      break;\r\n      \r\n    case 'select':\r\n      fieldHtml += `\r\n        <select id=\"${field.label.replace(/\\s+/g, '_')}\" name=\"${field.label}\" ${field.required ? 'required' : ''}>\r\n          <option value=\"\">Select an option</option>\r\n      `;\r\n      if (field.options?.choices) {\r\n        field.options.choices.forEach(choice => {\r\n          fieldHtml += `<option value=\"${choice}\">${choice}</option>`;\r\n        });\r\n      }\r\n      fieldHtml += `</select>`;\r\n      break;\r\n      \r\n    case 'role_select':\r\n      fieldHtml += `\r\n        <select id=\"${field.label.replace(/\\s+/g, '_')}\" name=\"${field.label}\" ${field.required ? 'required' : ''}>\r\n          <option value=\"\">Select a role</option>\r\n          <!-- Role options will be populated dynamically -->\r\n        </select>\r\n      `;\r\n      break;\r\n      \r\n    case 'file':\r\n      fieldHtml += `\r\n        <input \r\n          type=\"file\" \r\n          id=\"${field.label.replace(/\\s+/g, '_')}\" \r\n          name=\"${field.label}\" \r\n          multiple\r\n          ${field.required ? 'required' : ''}\r\n        />\r\n      `;\r\n      break;\r\n      \r\n    default:\r\n      // Fallback for unknown field types\r\n      fieldHtml += `\r\n        <input \r\n          type=\"text\" \r\n          id=\"${field.label.replace(/\\s+/g, '_')}\" \r\n          name=\"${field.label}\" \r\n          placeholder=\"${field.label}\"\r\n          ${field.required ? 'required' : ''}\r\n        />\r\n      `;\r\n      break;\r\n  }\r\n  \r\n  fieldHtml += `</div>`;\r\n  return fieldHtml;\r\n};\r\n\r\n/**\r\n * Generate HTML for a single step\r\n */\r\nconst generateStepHTML = (stepFields, stepIndex) => {\r\n  const isActive = stepIndex === 0 ? 'active' : '';\r\n  let stepHtml = `\r\n    <div class=\"form-step ${isActive}\" data-step=\"${stepIndex}\">\r\n  `;\r\n  \r\n  stepFields.forEach(field => {\r\n    if (field.id === 'submit') return; // Skip submit fields in HTML generation\r\n    const fieldHtml = generateFieldHTML(field);\r\n    stepHtml += fieldHtml;\r\n  });\r\n  \r\n  stepHtml += `</div>`;\r\n  return stepHtml;\r\n};\r\n\r\n/**\r\n * Generate navigation HTML for multi-step forms\r\n */\r\nconst generateNavigationHTML = (steps) => {\r\n  return `\r\n    <div class=\"form-navigation\">\r\n      <button type=\"button\" class=\"nav-button back\" id=\"prev-btn\" style=\"display: none;\">← Back</button>\r\n      <div class=\"step-indicator\">\r\n        Step <span id=\"current-step\">1</span> of <span id=\"total-steps\">${steps}</span>\r\n      </div>\r\n      <button type=\"button\" class=\"nav-button next\" id=\"next-btn\">Next →</button>\r\n    </div>\r\n  `;\r\n};\r\n\r\n/**\r\n * Generate form HTML structure\r\n */\r\nexport const generateFormHTML = (fields) => {\r\n  const isMultiStep = fields.length > 4;\r\n  const steps = isMultiStep ? Math.ceil(fields.length / 4) : 1;\r\n  const fieldsPerStep = Math.ceil(fields.length / steps);\r\n  \r\n  let html = `\r\n    <div class=\"dynamic-form-container\">\r\n      <form id=\"dynamic-user-form\" class=\"dynamic-form\">\r\n  `;\r\n  \r\n  if (isMultiStep) {\r\n    // Add step progress indicator\r\n    html += `\r\n      <div class=\"step-progress\">\r\n        <div class=\"step-progress-bar\" id=\"progress-bar\" style=\"width: ${100 / steps}%\"></div>\r\n      </div>\r\n    `;\r\n  }\r\n  \r\n  // Generate steps\r\n  for (let stepIndex = 0; stepIndex < steps; stepIndex++) {\r\n    const stepFields = fields.slice(stepIndex * fieldsPerStep, (stepIndex + 1) * fieldsPerStep);\r\n    const stepHtml = generateStepHTML(stepFields, stepIndex);\r\n    html += stepHtml;\r\n  }\r\n  \r\n  // Add navigation buttons for multi-step forms\r\n  if (isMultiStep) {\r\n    html += generateNavigationHTML(steps);\r\n  }\r\n  \r\n  // Add submit button\r\n  html += `\r\n    <button type=\"submit\" class=\"submit-button\">Add New User</button>\r\n  `;\r\n  \r\n  html += `\r\n      </form>\r\n    </div>\r\n  `;\r\n  \r\n  return html;\r\n};\r\n\r\n/**\r\n * Generate JavaScript for form functionality\r\n */\r\nexport const generateFormJS = (fields) => {\r\n  const isMultiStep = fields.length > 4;\r\n  const steps = isMultiStep ? Math.ceil(fields.length / 4) : 1;\r\n  \r\n  return `\r\n    // Auto-generated Form JavaScript\r\n    (function() {\r\n      let currentStep = 0;\r\n      const totalSteps = ${steps};\r\n      const form = document.getElementById('dynamic-user-form');\r\n      const progressBar = document.getElementById('progress-bar');\r\n      const currentStepSpan = document.getElementById('current-step');\r\n      const totalStepsSpan = document.getElementById('total-steps');\r\n      const prevBtn = document.getElementById('prev-btn');\r\n      const nextBtn = document.getElementById('next-btn');\r\n      \r\n      // Initialize form\r\n      function initForm() {\r\n        if (totalSteps > 1) {\r\n          updateStepDisplay();\r\n          updateNavigationButtons();\r\n        }\r\n        \r\n        // Add form validation\r\n        form.addEventListener('submit', handleSubmit);\r\n        \r\n        if (nextBtn) nextBtn.addEventListener('click', nextStep);\r\n        if (prevBtn) prevBtn.addEventListener('click', prevStep);\r\n      }\r\n      \r\n      // Update step display\r\n      function updateStepDisplay() {\r\n        const steps = document.querySelectorAll('.form-step');\r\n        steps.forEach((step, index) => {\r\n          step.classList.toggle('active', index === currentStep);\r\n        });\r\n        \r\n        if (progressBar) {\r\n          progressBar.style.width = ((currentStep + 1) / totalSteps) * 100 + '%';\r\n        }\r\n        \r\n        if (currentStepSpan) currentStepSpan.textContent = currentStep + 1;\r\n        if (totalStepsSpan) totalStepsSpan.textContent = totalSteps;\r\n      }\r\n      \r\n      // Update navigation buttons\r\n      function updateNavigationButtons() {\r\n        if (prevBtn) {\r\n          prevBtn.style.display = currentStep > 0 ? 'block' : 'none';\r\n        }\r\n        \r\n        if (nextBtn) {\r\n          nextBtn.style.display = currentStep < totalSteps - 1 ? 'block' : 'none';\r\n          nextBtn.textContent = currentStep === totalSteps - 1 ? 'Submit' : 'Next →';\r\n        }\r\n      }\r\n      \r\n      // Navigate to next step\r\n      function nextStep() {\r\n        if (validateCurrentStep()) {\r\n          if (currentStep < totalSteps - 1) {\r\n            currentStep++;\r\n            updateStepDisplay();\r\n            updateNavigationButtons();\r\n          } else {\r\n            form.dispatchEvent(new Event('submit'));\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Navigate to previous step\r\n      function prevStep() {\r\n        if (currentStep > 0) {\r\n          currentStep--;\r\n          updateStepDisplay();\r\n          updateNavigationButtons();\r\n        }\r\n      }\r\n      \r\n      // Validate current step\r\n      function validateCurrentStep() {\r\n        const currentStepElement = document.querySelector(\\`.form-step[data-step=\"\\${currentStep}\"]\\`);\r\n        const requiredFields = currentStepElement.querySelectorAll('[required]');\r\n        let isValid = true;\r\n        \r\n        requiredFields.forEach(field => {\r\n          if (!field.value.trim()) {\r\n            field.style.borderColor = '#ef4444';\r\n            isValid = false;\r\n          } else {\r\n            field.style.borderColor = '#e5e7eb';\r\n          }\r\n        });\r\n        \r\n        if (!isValid) {\r\n          alert('Please fill in all required fields before proceeding.');\r\n        }\r\n        \r\n        return isValid;\r\n      }\r\n      \r\n      // Handle form submission\r\n      function handleSubmit(e) {\r\n        e.preventDefault();\r\n        \r\n        if (!validateCurrentStep()) {\r\n          return;\r\n        }\r\n        \r\n        // Collect form data\r\n        const formData = new FormData(form);\r\n        const data = {};\r\n        \r\n        for (let [key, value] of formData.entries()) {\r\n          if (data[key]) {\r\n            if (Array.isArray(data[key])) {\r\n              data[key].push(value);\r\n            } else {\r\n              data[key] = [data[key], value];\r\n            }\r\n          } else {\r\n            data[key] = value;\r\n          }\r\n        }\r\n        \r\n        // Add organization_id (this should be passed from the parent component)\r\n        data.organization_id = window.organizationId || '';\r\n        \r\n        console.log('Form data:', data);\r\n        \r\n        // Submit form data\r\n        submitFormData(data);\r\n      }\r\n      \r\n      // Submit form data to server\r\n      async function submitFormData(data) {\r\n        try {\r\n          const hasFileField = document.querySelector('input[type=\"file\"]');\r\n          \r\n          let response;\r\n          if (hasFileField) {\r\n            const formData = new FormData();\r\n            Object.entries(data).forEach(([key, value]) => {\r\n              if (value instanceof FileList) {\r\n                Array.from(value).forEach(file => formData.append(key, file));\r\n              } else {\r\n                formData.append(key, value);\r\n              }\r\n            });\r\n            response = await fetch('/users/create', {\r\n              method: 'POST',\r\n              body: formData\r\n            });\r\n          } else {\r\n            response = await fetch('/users/create', {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify(data)\r\n            });\r\n          }\r\n          \r\n          if (response.ok) {\r\n            alert('User added successfully!');\r\n            form.reset();\r\n            if (window.onUserAdded) window.onUserAdded();\r\n          } else {\r\n            throw new Error('Failed to add user');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error:', error);\r\n          alert('Error adding user. Please try again.');\r\n        }\r\n      }\r\n      \r\n      // Initialize when DOM is ready\r\n      if (document.readyState === 'loading') {\r\n        document.addEventListener('DOMContentLoaded', initForm);\r\n      } else {\r\n        initForm();\r\n      }\r\n    })();\r\n  `;\r\n};\r\n\r\n/**\r\n * Compile complete form with HTML, CSS, and JS\r\n */\r\nexport const compileForm = (fields) => {\r\n  const isMultiStep = fields.length > 4;\r\n  const totalSteps = isMultiStep ? Math.ceil(fields.length / 4) : 1;\r\n  \r\n  return {\r\n    fields: fields,\r\n    isMultiStep: isMultiStep,\r\n    totalSteps: totalSteps,\r\n    html: generateFormHTML(fields),\r\n    css: generateFormCSS(fields),\r\n    js: generateFormJS(fields),\r\n    metadata: {\r\n      createdAt: new Date().toISOString(),\r\n      fieldCount: fields.length,\r\n      hasFileUpload: fields.some(f => f.id === 'file'),\r\n      hasRoleSelection: fields.some(f => f.id === 'role_select'),\r\n      hasRadioButtons: fields.some(f => f.id === 'radio'),\r\n      hasCheckboxes: fields.some(f => f.id === 'checkbox'),\r\n      hasSelectDropdowns: fields.some(f => f.id === 'select'),\r\n      requiredFieldsCount: fields.filter(f => f.required).length,\r\n      fieldTypes: [...new Set(fields.map(f => f.id))],\r\n      estimatedCompletionTime: Math.ceil(fields.length * 0.5) // Rough estimate in minutes\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Validate form compilation\r\n */\r\nexport const validateFormCompilation = (compiledForm) => {\r\n  const errors = [];\r\n  \r\n  if (!compiledForm.fields || compiledForm.fields.length === 0) {\r\n    errors.push('No fields defined');\r\n  }\r\n  \r\n  if (!compiledForm.html) {\r\n    errors.push('HTML generation failed');\r\n  }\r\n  \r\n  if (!compiledForm.css) {\r\n    errors.push('CSS generation failed');\r\n  }\r\n  \r\n  if (!compiledForm.js) {\r\n    errors.push('JavaScript generation failed');\r\n  }\r\n  \r\n  // Check for required fields\r\n  const hasRequiredFields = compiledForm.fields.some(f => f.required);\r\n  if (!hasRequiredFields) {\r\n    errors.push('No required fields defined - consider making some fields mandatory');\r\n  }\r\n  \r\n  // Check for submit field\r\n  const hasSubmitField = compiledForm.fields.some(f => f.id === 'submit');\r\n  if (!hasSubmitField) {\r\n    errors.push('No submit field found - form may not be submittable');\r\n  }\r\n  \r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors: errors,\r\n    warnings: []\r\n  };\r\n};\r\n"
        }
    ]
}