{
    "sourceFile": "src/components/snr_management/CreateUserFormBuilder.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756834834020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756834834020,
            "name": "Commit-0",
            "content": "// // src/components/snr_management/CreateUserFormBuilder.js\r\n// import React, { useState, useEffect, useCallback } from 'react';\r\n// import { DndProvider, useDrag, useDrop } from 'react-dnd';\r\n// import { HTML5Backend } from 'react-dnd-html5-backend';\r\n// import { motion } from 'framer-motion';\r\n// import './FormBuilderModal.css';\r\n// import request from '../request';\r\n// import FieldConfiguration from './FieldConfiguration';\r\n\r\n\r\n// // Define the available fields.\r\n// const availableFields = [\r\n//   { id: 'text', label: 'Text Input' },\r\n//   { id: 'email', label: 'Email Input' },\r\n//   { id: 'url', label: 'URL Input' },\r\n//   { id: 'date', label: 'Date Picker' },\r\n//   { id: 'phone', label: 'Phone Number' },\r\n//   { id: 'radio', label: 'Radio Buttons' },\r\n//   { id: 'checkbox', label: 'Checkboxes' },\r\n//   { id: 'file', label: 'File Upload' },\r\n//   { id: 'role_select', label: 'Role Selection' },\r\n//   { id: 'submit', label: 'Submit Button' },\r\n//   { id: 'text_area', label: 'Text Area' },\r\n//   { id: 'number', label: 'Number Input' },\r\n//   { id: 'select', label: 'Dropdown Select' },\r\n// ];\r\n\r\n// const initialFormFields = [];\r\n\r\n// /** FieldConfiguration renders inline controls for each dropped field */\r\n// // const FieldConfiguration = ({ field, index, onFieldUpdate }) => {\r\n// //   const handleChange = (e) => {\r\n// //     const { name, value, type, checked } = e.target;\r\n// //     const newVal = type === 'checkbox' ? checked : value;\r\n// //     onFieldUpdate(index, { [name]: newVal });\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"field-config\">\r\n// //       <div className=\"config-group\">\r\n// //         <label>Label</label>\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           name=\"label\"\r\n// //           value={field.label}\r\n// //           onChange={handleChange}\r\n// //           placeholder=\"Field label\"\r\n// //         />\r\n// //       </div>\r\n// //       {['radio', 'checkbox', 'select'].includes(field.id) && (\r\n// //         <div className=\"config-group\">\r\n// //           <label>Options (comma separated)</label>\r\n// //           <input\r\n// //             type=\"text\"\r\n// //             name=\"choices\"\r\n// //             value={field.options?.choices ? field.options.choices.join(',') : ''}\r\n// //             onChange={(e) =>\r\n// //               onFieldUpdate(index, {\r\n// //                 options: {\r\n// //                   ...field.options,\r\n// //                   choices: e.target.value.split(',').map((opt) => opt.trim()),\r\n// //                 },\r\n// //               })\r\n// //             }\r\n// //             placeholder=\"e.g., Option1, Option2\"\r\n// //           />\r\n// //         </div>\r\n// //       )}\r\n// //       <div className=\"config-group\">\r\n// //         <label>\r\n// //           <input\r\n// //             type=\"checkbox\"\r\n// //             name=\"required\"\r\n// //             checked={field.required || false}\r\n// //             onChange={handleChange}\r\n// //           />{' '}\r\n// //           Required\r\n// //         </label>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// /** DraggableField for the available fields palette */\r\n// const DraggableField = ({ field }) => {\r\n//   const [{ isDragging }, drag] = useDrag(() => ({\r\n//     type: 'FIELD',\r\n//     item: { field },\r\n//     collect: (monitor) => ({ isDragging: monitor.isDragging() }),\r\n//   }));\r\n//   return (\r\n//     <div ref={drag} className=\"field-item\" style={{ opacity: isDragging ? 0.5 : 1 }}>\r\n//       {field.label}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// /** FormFieldItem: a draggable field in the builder area with inline configuration */\r\n// const FormFieldItem = ({ field, index, moveField, onFieldUpdate }) => {\r\n//   const ref = React.useRef(null);\r\n//   const [, drop] = useDrop({\r\n//     accept: 'BUILDER_FIELD',\r\n//     hover(item, monitor) {\r\n//       if (!ref.current) return;\r\n//       const dragIndex = item.index;\r\n//       const hoverIndex = index;\r\n//       if (dragIndex === hoverIndex) return;\r\n//       const hoverBoundingRect = ref.current.getBoundingClientRect();\r\n//       const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n//       const clientOffset = monitor.getClientOffset();\r\n//       const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n//       if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) return;\r\n//       if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) return;\r\n//       moveField(dragIndex, hoverIndex);\r\n//       item.index = hoverIndex;\r\n//     },\r\n//   });\r\n\r\n//   const [{ isDragging }, drag] = useDrag({\r\n//     type: 'BUILDER_FIELD',\r\n//     item: { type: 'BUILDER_FIELD', id: field.id, index },\r\n//     collect: (monitor) => ({ isDragging: monitor.isDragging() }),\r\n//   });\r\n//   drag(drop(ref));\r\n\r\n//   return (\r\n//     <motion.div\r\n//       ref={ref}\r\n//       className=\"form-field\"\r\n//       style={{ opacity: isDragging ? 0.5 : 1 }}\r\n//       initial={{ opacity: 0, y: 10 }}\r\n//       animate={{ opacity: 1, y: 0 }}\r\n//       transition={{ duration: 0.2 }}\r\n//     >\r\n//       <div className=\"field-display\">\r\n//         <strong>{field.label}</strong>\r\n//       </div>\r\n//       <FieldConfiguration field={field} index={index} onFieldUpdate={onFieldUpdate} />\r\n//     </motion.div>\r\n//   );\r\n// };\r\n\r\n// /** The main form builder component */\r\n// const CreateUserFormBuilder = ({ organizationId, onClose, onSaveSuccess }) => {\r\n//   const [formFields, setFormFields] = useState(initialFormFields);\r\n//   const [userCreateUrl, setUserCreateUrl] = useState('');\r\n//   const [roleOptions, setRoleOptions] = useState([]);\r\n\r\n//   // Fetch the user create URL.\r\n//   useEffect(() => {\r\n//     const fetchCreateUrl = async () => {\r\n//       try {\r\n//         const res = await request.get('/organizations/create-url');\r\n//         if (res.status !== 200) throw new Error('Failed to fetch create URL');\r\n//         const data = await res.json();\r\n//         setUserCreateUrl(data.user_create_url);\r\n//       } catch (error) {\r\n//         console.error('Error fetching create URL:', error);\r\n//       }\r\n//     };\r\n//     fetchCreateUrl();\r\n//   }, []);\r\n\r\n//   // Fetch role options.\r\n//   useEffect(() => {\r\n//     const fetchRoleOptions = async () => {\r\n//       try {\r\n//         let res = await request.get(`/fetch?organization_id=${organizationId}&skip=0&limit=100`);\r\n//         let data = await res.json();\r\n//         if (!data?.data || data.data.length === 0) {\r\n//           res = await request.get(`/default/fetch-all/?skip=0&limit=100`);\r\n//           data = await res.json();\r\n//         }\r\n//         if (data?.data) {\r\n//           const roles = data.data.map((role) => ({ id: role.id, name: role.name }));\r\n//           setRoleOptions(roles);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Error fetching role options:', error);\r\n//       }\r\n//     };\r\n//     fetchRoleOptions();\r\n//   }, [organizationId]);\r\n\r\n//   // Move field for reordering within the builder.\r\n//   const moveField = useCallback((dragIndex, hoverIndex) => {\r\n//     setFormFields((prevFields) => {\r\n//       const updatedFields = Array.from(prevFields);\r\n//       const [removed] = updatedFields.splice(dragIndex, 1);\r\n//       updatedFields.splice(hoverIndex, 0, removed);\r\n//       return updatedFields;\r\n//     });\r\n//   }, []);\r\n\r\n//   const updateField = (index, updateProps) => {\r\n//     setFormFields((prev) => {\r\n//       const newFields = [...prev];\r\n//       newFields[index] = { ...newFields[index], ...updateProps };\r\n//       return newFields;\r\n//     });\r\n//   };\r\n\r\n//   // The drop zone for adding fields from the palette.\r\n//   const FormBuilderArea = () => {\r\n//     const [, drop] = useDrop({\r\n//       accept: 'FIELD',\r\n//       drop: (item) => {\r\n//         const field = availableFields.find((f) => f.id === item.field.id);\r\n//         if (field) {\r\n//           const newField = {\r\n//             ...field,\r\n//             options: ['role_select', 'radio', 'checkbox', 'select'].includes(field.id)\r\n//               ? { choices: [] }\r\n//               : {},\r\n//             required: false,\r\n//             validation: field.id === 'phone'\r\n//               ? { countryCodes: ['+1', '+44', '+91'], maxLength: 10 }\r\n//               : field.id === 'email'\r\n//               ? { regex: '^[\\\\w-.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$' }\r\n//               : {},\r\n//           };\r\n//           setFormFields((prev) => [...prev, newField]);\r\n//         }\r\n//       },\r\n//     });\r\n//     return (\r\n//       <div ref={drop} className=\"form-builder\">\r\n//         <h3>Your Form</h3>\r\n//         {formFields.map((field, index) => (\r\n//           <FormFieldItem\r\n//             key={index}\r\n//             field={field}\r\n//             index={index}\r\n//             moveField={moveField}\r\n//             onFieldUpdate={updateField}\r\n//           />\r\n//         ))}\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   // Automatically ensure a \"submit\" field exists before saving.\r\n//   const ensureSubmitField = (fields) => {\r\n//     if (!fields.some((field) => field.id === 'submit')) {\r\n//       return [\r\n//         ...fields,\r\n//         {\r\n//           id: 'submit',\r\n//           label: 'Submit',\r\n//           required: false,\r\n//           options: {},\r\n//           validation: {},\r\n//         },\r\n//       ];\r\n//     }\r\n//     return fields;\r\n//   };\r\n\r\n//   // Save the form design.\r\n//   const handleSaveForm = async () => {\r\n//     const fieldsWithSubmit = ensureSubmitField(formFields);\r\n//     const formDesign = {\r\n//       fields: fieldsWithSubmit,\r\n//       submitCode: \"\",\r\n//     };\r\n//     try {\r\n//       const res = await request.post('/dashboards/dashboards', JSON.stringify({ organization_id: organizationId, form_design: formDesign })\r\n//       //   {\r\n//       //   method: 'POST',\r\n//       //   headers: {\r\n//       //     'Content-Type': 'application/json',\r\n//       //     Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n//       //   },\r\n//       //   body: JSON.stringify({ organization_id: organizationId, form_design: formDesign }),\r\n//       // }\r\n//     );\r\n//       if (!res.ok) throw new Error('Error saving form design');\r\n//       onSaveSuccess();\r\n//       onClose();\r\n//     } catch (error) {\r\n//       console.error('Error saving form design:', error);\r\n//       alert(error.message);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <DndProvider backend={HTML5Backend}>\r\n//       <div className=\"modal-overlay\">\r\n//         <div className=\"modal-content\">\r\n//           <h2>Form Builder</h2>\r\n//           <div className=\"builder-container\">\r\n//             <div className=\"field-palette\">\r\n//               <h3>Available Fields</h3>\r\n//               {availableFields.map((field) => (\r\n//                 <DraggableField key={field.id} field={field} />\r\n//               ))}\r\n//             </div>\r\n//             <FormBuilderArea />\r\n//           </div>\r\n//           <div className=\"modal-actions\">\r\n//             <button onClick={handleSaveForm}>Save Form Design</button>\r\n//             <button onClick={onClose}>Cancel</button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </DndProvider>\r\n//   );\r\n// };\r\n\r\n// export default CreateUserFormBuilder;\r\n\r\n\r\n// src/components/snr_management/CreateUserFormBuilder.js\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\n// import { motion, AnimatePresence } from 'framer-motion'; // Temporarily disabled for drag and drop debugging\r\nimport './FormBuilderModal.css';\r\nimport request from '../request';\r\nimport FieldConfiguration from './FieldConfiguration';\r\nimport { FaTrashAlt } from 'react-icons/fa'; // For remove button\r\nimport { toast } from 'react-toastify';\r\nimport { compileForm, validateFormCompilation } from './FormCompiler';\r\n\r\n// Define the available fields.\r\nconst availableFields = [\r\n  { id: 'text', label: 'Text Input' },\r\n  { id: 'email', label: 'Email Input' },\r\n  { id: 'url', label: 'URL Input' },\r\n  { id: 'date', label: 'Date Picker' },\r\n  { id: 'phone', label: 'Phone Number' },\r\n  { id: 'radio', label: 'Radio Buttons' },\r\n  { id: 'checkbox', label: 'Checkboxes' },\r\n  { id: 'file', label: 'File Upload' },\r\n  { id: 'role_select', label: 'Role Selection' },\r\n  { id: 'submit', label: 'Submit Button' },\r\n  { id: 'text_area', label: 'Text Area' },\r\n  { id: 'number', label: 'Number Input' },\r\n  { id: 'select', label: 'Dropdown Select' },\r\n];\r\n\r\nconst initialFormFields = [];\r\n\r\n/** DraggableField: Displays each available field in the palette */\r\nconst DraggableField = ({ field }) => {\r\n  const [{ isDragging }, drag] = useDrag(() => ({\r\n    type: 'FIELD',\r\n    item: () => {\r\n      console.log('Drag started for field:', field); // Debug log\r\n      return { field };\r\n    },\r\n    collect: (monitor) => ({ \r\n      isDragging: monitor.isDragging() \r\n    }),\r\n    end: (item, monitor) => {\r\n      console.log('Drag ended for field:', field); // Debug log\r\n    },\r\n  }));\r\n  \r\n  return (\r\n    <div \r\n      ref={drag} \r\n      className={`field-item ${isDragging ? 'dragging' : ''}`}\r\n      style={{ \r\n        cursor: isDragging ? 'grabbing' : 'grab',\r\n        opacity: isDragging ? 0.5 : 1 \r\n      }}\r\n    >\r\n      {field.label}\r\n    </div>\r\n  );\r\n};\r\n\r\n/** FormFieldItem: Displays a dropped field with inline configuration and a remove button */\r\nconst FormFieldItem = ({ field, index, moveField, onFieldUpdate, onRemove }) => {\r\n  const ref = React.useRef(null);\r\n  \r\n  // Enable drop to reorder.\r\n  const [, drop] = useDrop({\r\n    accept: 'BUILDER_FIELD',\r\n    hover(item, monitor) {\r\n      if (!ref.current) return;\r\n      const dragIndex = item.index;\r\n      const hoverIndex = index;\r\n      if (dragIndex === hoverIndex) return;\r\n      const hoverBoundingRect = ref.current.getBoundingClientRect();\r\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n      const clientOffset = monitor.getClientOffset();\r\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) return;\r\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) return;\r\n      moveField(dragIndex, hoverIndex);\r\n      item.index = hoverIndex;\r\n    },\r\n  });\r\n  const [{ isDragging }, drag] = useDrag({\r\n    type: 'BUILDER_FIELD',\r\n    item: () => ({ type: 'BUILDER_FIELD', id: field.id, index }),\r\n    collect: (monitor) => ({ isDragging: monitor.isDragging() }),\r\n  });\r\n  drag(drop(ref));\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      className=\"form-field\"\r\n      style={{ opacity: isDragging ? 0.5 : 1 }}\r\n    >\r\n      <div className=\"field-display\">\r\n        <strong>{field.label}</strong>\r\n        <button\r\n          type=\"button\"\r\n          className=\"remove-field-btn\"\r\n          onClick={() => onRemove(index)}\r\n          title=\"Remove field\"\r\n        >\r\n          <FaTrashAlt />\r\n        </button>\r\n      </div>\r\n      <FieldConfiguration field={field} index={index} onFieldUpdate={onFieldUpdate} />\r\n    </div>\r\n  );\r\n};\r\n\r\n/** FormBuilderArea: The drop zone where fields are assembled */\r\nconst FormBuilderArea = ({ formFields, setFormFields, moveField, updateField, removeField }) => {\r\n  const [{ isOver, canDrop }, drop] = useDrop({\r\n    accept: 'FIELD',\r\n    drop: (item, monitor) => {\r\n      console.log('Dropped item:', item); // Debug log\r\n      console.log('Drop result:', monitor.getDropResult()); // Debug log\r\n      \r\n      const field = availableFields.find((f) => f.id === item.field.id);\r\n      if (field) {\r\n        const newField = {\r\n          ...field,\r\n          options: ['role_select', 'radio', 'checkbox', 'select'].includes(field.id)\r\n            ? { choices: [] }\r\n            : {},\r\n          required: false,\r\n          validation: field.id === 'phone'\r\n            ? { countryCodes: ['+1', '+44', '+91', '+233'], maxLength: 10 }\r\n            : field.id === 'email'\r\n            ? { regex: '^[\\\\w-.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$' }\r\n            : {},\r\n        };\r\n        console.log('Adding new field:', newField); // Debug log\r\n        setFormFields((prev) => [...prev, newField]);\r\n      }\r\n    },\r\n    collect: (monitor) => ({\r\n      isOver: monitor.isOver(),\r\n      canDrop: monitor.canDrop(),\r\n    }),\r\n  });\r\n  return (\r\n    <div \r\n      ref={drop} \r\n      className={`form-builder ${isOver ? 'drag-over' : ''} ${canDrop ? 'can-drop' : ''}`}\r\n    >\r\n      <h3>Your Form</h3>\r\n      {isOver && canDrop && (\r\n        <div style={{ \r\n          position: 'absolute', \r\n          top: '50%', \r\n          left: '50%', \r\n          transform: 'translate(-50%, -50%)',\r\n          background: 'rgba(0, 123, 255, 0.1)',\r\n          padding: '20px',\r\n          borderRadius: '8px',\r\n          border: '2px dashed #007bff',\r\n          color: '#007bff',\r\n          fontWeight: 'bold',\r\n          zIndex: 10\r\n        }}>\r\n          Drop field here\r\n        </div>\r\n      )}\r\n      {formFields.map((field, index) => (\r\n        <FormFieldItem\r\n          key={`${field.id}-${index}`}\r\n          field={field}\r\n          index={index}\r\n          moveField={moveField}\r\n          onFieldUpdate={updateField}\r\n          onRemove={removeField}\r\n        />\r\n      ))}\r\n      {formFields.length === 0 && (\r\n        <div className=\"empty-state\">\r\n          Drag fields from the palette to build your form\r\n          <p>Please include fields for the following records</p>\r\n          <br/>\r\n          <i>Title or Prefix</i> - Dropdown Selection <br/>\r\n          <i>First Name or Given Name</i> - Text Input <br/>\r\n          <i>Middle Name</i> - Text Input <br/>\r\n          <i>Last Name or Surname</i> - Text Input <br/>\r\n          <i>Email</i> - Email Field & <br/>\r\n          <i>Role</i> - Role Selection Field\r\n          <br/>\r\n        <strong>System accepts just one File Upload Field</strong>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CreateUserFormBuilder = ({ organizationId, userId, onClose, onSaveSuccess }) => {\r\n  const [formFields, setFormFields] = useState(initialFormFields);\r\n  const [userCreateUrl, setUserCreateUrl] = useState('');\r\n\r\n  // Fetch the user create URL.\r\n  useEffect(() => {\r\n    const fetchCreateUrl = async () => {\r\n      try {\r\n        const res = await request.get('/organizations/create-url');\r\n        if (res.status !== 200) throw new Error('Failed to fetch create URL');\r\n        const data = await res.data;\r\n        console.log(\"user_create_url data: \", data);\r\n        console.log(\"user_create_url: \", data.user_create_url);\r\n        setUserCreateUrl(data.user_create_url);\r\n      } catch (error) {\r\n        console.error('Error fetching create URL:', error);\r\n      }\r\n    };\r\n    fetchCreateUrl();\r\n  }, []);\r\n\r\n  // Note: Role options are handled by the FieldConfiguration component\r\n\r\n  // Reorder fields.\r\n  const moveField = useCallback((dragIndex, hoverIndex) => {\r\n    setFormFields((prevFields) => {\r\n      const updatedFields = Array.from(prevFields);\r\n      const [removed] = updatedFields.splice(dragIndex, 1);\r\n      updatedFields.splice(hoverIndex, 0, removed);\r\n      return updatedFields;\r\n    });\r\n  }, []);\r\n\r\n  // Update a field's properties.\r\n  const updateField = (index, updateProps) => {\r\n    setFormFields((prev) => {\r\n      const newFields = [...prev];\r\n      newFields[index] = { ...newFields[index], ...updateProps };\r\n      return newFields;\r\n    });\r\n  };\r\n\r\n  // Remove a field from the form.\r\n  const removeField = (index) => {\r\n    setFormFields((prev) => prev.filter((_, i) => i !== index));\r\n  };\r\n\r\n  // Ensure a \"submit\" field exists.\r\n  // Optionally check if a submit field is already included; if not, we do not add one automatically.\r\n  const ensureSubmitField = (fields) => {\r\n    if (!fields.some((field) => field.id === 'submit')) {\r\n      return [\r\n        ...fields,\r\n        {\r\n          id: 'submit',\r\n          label: 'Submit',\r\n          required: false,\r\n          options: {},\r\n          validation: {},\r\n        },\r\n      ];\r\n    }\r\n    return fields;\r\n  };\r\n\r\n  // Save the form design with compiled HTML, CSS, and JS\r\n  const handleSaveForm = async () => {\r\n    console.log(\"userId: \", userId);\r\n    console.log(\"organizationId: \", organizationId);\r\n    \r\n    const fieldsWithSubmit = ensureSubmitField(formFields);\r\n    \r\n    // Compile the form using the FormCompiler utility\r\n    const compiledForm = compileForm(fieldsWithSubmit);\r\n    \r\n    // Validate the compiled form\r\n    const validation = validateFormCompilation(compiledForm);\r\n    if (!validation.isValid) {\r\n      toast.error(`Form validation failed: ${validation.errors.join(', ')}`);\r\n      return;\r\n    }\r\n    \r\n    // Add submit code and additional metadata\r\n    const formDesign = {\r\n      ...compiledForm,\r\n      submitCode: \"\",\r\n      submitUrl: userCreateUrl || \"/users/create\"\r\n    };\r\n    \r\n    // Prepare a complete dashboard payload\r\n    const dashboardPayload = {\r\n      dashboard_name: \"User Registration Form\",\r\n      dashboard_data: formDesign,\r\n      access_url: userCreateUrl || \"\",\r\n      organization_id: organizationId,\r\n      user_id: userId || null,\r\n    };\r\n    \r\n    try {\r\n      const res = await request.post(\r\n        '/dashboards/upsert',\r\n        JSON.stringify(dashboardPayload)\r\n      );\r\n      \r\n      if (res.status !== 201) {\r\n        throw new Error('Error saving form design');\r\n      }\r\n      \r\n      console.log('Compiled form saved successfully:', compiledForm);\r\n      toast.success(`Form design saved successfully! ${compiledForm.isMultiStep ? `Multi-step form with ${compiledForm.totalSteps} steps created.` : 'Single-step form created.'}`);\r\n      onSaveSuccess();\r\n      onClose();\r\n    } catch (error) {\r\n      console.error('Error saving form design:', error);\r\n      toast.error(`Error saving form design: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  // Handle keyboard events\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      if (event.key === 'Escape') {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => document.removeEventListener('keydown', handleKeyDown);\r\n  }, [onClose]);\r\n\r\n  // Debug: Log when component mounts\r\n  useEffect(() => {\r\n    console.log('CreateUserFormBuilder mounted');\r\n    console.log('Available fields:', availableFields);\r\n  }, []);\r\n\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      <div className=\"modal-overlay\" onClick={onClose}>\r\n        <div \r\n          className=\"modal-content\" \r\n          onClick={(e) => e.stopPropagation()}\r\n        >\r\n          <h2>Form Builder</h2>\r\n          <button \r\n            className=\"close-btn\" \r\n            onClick={onClose} \r\n            aria-label=\"Close modal\"\r\n            tabIndex={0}\r\n          >\r\n            &times;\r\n          </button>\r\n          \r\n          <div className=\"description\">\r\n            Drag fields from the palette to build your form. Configure each field as needed.\r\n          </div>\r\n\r\n          <div className=\"builder-container\">\r\n            <div className=\"field-palette\">\r\n              <h3>Available Fields</h3>\r\n              {availableFields.map((field) => (\r\n                <DraggableField key={field.id} field={field} />\r\n              ))}\r\n            </div>\r\n            <FormBuilderArea\r\n              formFields={formFields}\r\n              setFormFields={setFormFields}\r\n              moveField={moveField}\r\n              updateField={updateField}\r\n              removeField={removeField}\r\n            />\r\n          </div>\r\n          <div className=\"modal-actions\">\r\n            <button onClick={handleSaveForm}>\r\n              Save Form Design\r\n            </button>\r\n            <button onClick={onClose}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </DndProvider>\r\n  );\r\n};\r\n\r\nexport default CreateUserFormBuilder;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// import './FormBuilderModal.css';\r\n// import request from '../request';\r\n// import { motion } from 'framer-motion';\r\n\r\n// // Available field definitions; note the added \"role_select\" option.\r\n// const availableFields = [\r\n//   { id: 'text', label: 'Text Input' },\r\n//   { id: 'email', label: 'Email Input' },\r\n//   { id: 'url', label: 'URL Input' },\r\n//   { id: 'date', label: 'Date Picker' },\r\n//   { id: 'phone', label: 'Phone Number' },\r\n//   { id: 'radio', label: 'Radio Buttons' },\r\n//   { id: 'checkbox', label: 'Checkboxes' },\r\n//   { id: 'file', label: 'File Upload' },\r\n//   { id: 'role_select', label: 'Role Selection' },\r\n//   { id: 'submit', label: 'Submit Button' },\r\n//   {id: 'text_area', label: 'Text Area'},\r\n//   {id: 'number', label: 'Number Input'},\r\n//   {id: 'select', label: 'Dropdown Select'},\r\n//   // add other fields as needed\r\n// ];\r\n\r\n// const initialFormFields = [];\r\n\r\n// const CreateUserFormBuilderBuilder = ({ organizationId, onClose, onSaveSuccess }) => {\r\n//   // State holds the current form fields, fetched create URL, and available role options.\r\n//   const [formFields, setFormFields] = useState(initialFormFields);\r\n//   const [userCreateUrl, setUserCreateUrl] = useState('');\r\n//   const [roleOptions, setRoleOptions] = useState([]); // { id, name }\r\n\r\n//   // Prefetch the User Create API URL.\r\n//   useEffect(() => {\r\n//     const fetchCreateUrl = async () => {\r\n//       try {\r\n//         const res = await request.get('/organizations/create-url', \r\n//         //   {\r\n//         //   method: 'GET',\r\n//         //   // headers: {\r\n//         //   //   Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n//         //   // },\r\n//         // }\r\n//       );\r\n//         if (!res.ok) throw new Error('Failed to fetch create URL');\r\n//         const data = await res.json();\r\n//         setUserCreateUrl(data.user_create_url);\r\n//       } catch (error) {\r\n//         console.error('Error fetching create URL:', error);\r\n//       }\r\n//     };\r\n//     fetchCreateUrl();\r\n//   }, []);\r\n\r\n//   // Fetch role options using the protected endpoint. If empty, fallback to default API.\r\n//   useEffect(() => {\r\n//     const fetchRoleOptions = async () => {\r\n//       try {\r\n//         // First try the primary API.\r\n//         let res = await request.get(\r\n//           `/fetch?organization_id=${organizationId}&skip=0&limit=100`,\r\n//           // {\r\n//           //   // headers: {\r\n//           //   //   Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n//           //   // },\r\n//           // }\r\n//         );\r\n//         let data = await res.json();\r\n//         // If empty array, fetch from fallback.\r\n//         if (!data?.data || data.data.length === 0) {\r\n//           res = await request.get(`/default/fetch-all/?skip=0&limit=100`, \r\n//           //   {\r\n//           //   headers: {\r\n//           //     Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n//           //   },\r\n//           // }\r\n//         );\r\n//           data = await res.json();\r\n//         }\r\n//         // Expecting data.data to be an array of roles.\r\n//         if (data?.data) {\r\n//           // Map the list so that each role has id (unique identifier) and name.\r\n//           const roles = data.data.map(role => ({\r\n//             id: role.id,\r\n//             name: role.name,\r\n//           }));\r\n//           setRoleOptions(roles);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Error fetching role options:', error);\r\n//       }\r\n//     };\r\n//     fetchRoleOptions();\r\n//   }, [organizationId]);\r\n\r\n//   // Handle reordering in the form builder area.\r\n//   const reorderFields = (list, startIndex, endIndex) => {\r\n//     const result = Array.from(list);\r\n//     const [removed] = result.splice(startIndex, 1);\r\n//     result.splice(endIndex, 0, removed);\r\n//     return result;\r\n//   };\r\n\r\n//   // Field configuration component renders inline controls for updating field properties.\r\n//   const FieldConfiguration = ({ field, index, onFieldUpdate }) => {\r\n//     const handleChange = (e) => {\r\n//       const { name, value, type, checked } = e.target;\r\n//       const newVal = type === 'checkbox' ? checked : value;\r\n//       onFieldUpdate(index, { [name]: newVal });\r\n//     };\r\n\r\n//     return (\r\n//       <div className=\"field-config\">\r\n//         <div className=\"config-group\">\r\n//           <label>Label</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             name=\"label\"\r\n//             value={field.label}\r\n//             onChange={handleChange}\r\n//             placeholder=\"Field label\"\r\n//           />\r\n//         </div>\r\n//         {['radio', 'checkbox', 'select'].includes(field.id) && (\r\n//           <div className=\"config-group\">\r\n//             <label>Options (comma separated)</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               name=\"choices\"\r\n//               value={field.options?.choices ? field.options.choices.join(',') : ''}\r\n//               onChange={(e) =>\r\n//                 onFieldUpdate(index, { options: { ...field.options, choices: e.target.value.split(',').map(opt => opt.trim()) } })\r\n//               }\r\n//               placeholder=\"e.g., Option1, Option2\"\r\n//             />\r\n//           </div>\r\n//         )}\r\n//         <div className=\"config-group\">\r\n//           <label>\r\n//             <input\r\n//               type=\"checkbox\"\r\n//               name=\"required\"\r\n//               checked={field.required || false}\r\n//               onChange={handleChange}\r\n//             />{' '}\r\n//             Required\r\n//           </label>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   const updateField = (index, updateProps) => {\r\n//     setFormFields(prev => {\r\n//       const newFields = [...prev];\r\n//       newFields[index] = { ...newFields[index], ...updateProps };\r\n//       return newFields;\r\n//     });\r\n//   };\r\n\r\n//   // Drag and drop handler.\r\n//   const onDragEnd = (result) => {\r\n//     const { source, destination, draggableId } = result;\r\n//     if (!destination) return;\r\n\r\n//     // When dragging from palette to form builder, add a new field.\r\n//     if (source.droppableId === 'availableFields' && destination.droppableId === 'formBuilder') {\r\n//       const field = availableFields.find(f => f.id === draggableId);\r\n//       // For role selection field, attach an empty options array that will be replaced by roleOptions.\r\n//       const newField = {\r\n//         ...field,\r\n//         // If field is role_select, set options to roleOptions; else initialize empty options object.\r\n//         options: ['role_select', 'radio', 'checkbox', 'select'].includes(field.id)\r\n//           ? { choices: [] }\r\n//           : {},\r\n//         required: false,\r\n//         validation:\r\n//           field.id === 'phone'\r\n//             ? { countryCodes: ['+1', '+44', '+91'], maxLength: 10 }\r\n//             : field.id === 'email'\r\n//             ? { regex: '^[\\\\w-.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$' }\r\n//             : {},\r\n//       };\r\n//       setFormFields(prev => [...prev, newField]);\r\n//       return;\r\n//     }\r\n\r\n//     // If reordering within the form builder area.\r\n//     if (\r\n//       source.droppableId === 'formBuilder' &&\r\n//       destination.droppableId === 'formBuilder'\r\n//     ) {\r\n//       const reordered = reorderFields(formFields, source.index, destination.index);\r\n//       setFormFields(reordered);\r\n//     }\r\n//   };\r\n\r\n//   // Update a field's options.\r\n//   const updateFieldOptions = (index, options) => {\r\n//     setFormFields(prev => {\r\n//       const newFields = [...prev];\r\n//       newFields[index].options = { ...newFields[index].options, ...options };\r\n//       return newFields;\r\n//     });\r\n//   };\r\n\r\n//   // Toggle a field's required flag.\r\n//   const toggleRequired = (index) => {\r\n//     setFormFields(prev => {\r\n//       const newFields = [...prev];\r\n//       newFields[index].required = !newFields[index].required;\r\n//       return newFields;\r\n//     });\r\n//   };\r\n\r\n//   // Automatically ensure a \"submit\" field exists.\r\n//   const ensureSubmitField = (fields) => {\r\n//     const hasSubmit = fields.some(field => field.id === 'submit');\r\n//     if (!hasSubmit) {\r\n//       return [\r\n//         ...fields,\r\n//         {\r\n//           id: 'submit',\r\n//           label: 'Submit',\r\n//           required: false,\r\n//           // No options or validation needed.\r\n//           options: {},\r\n//           validation: {}\r\n//         }\r\n//       ];\r\n//     }\r\n//     return fields;\r\n//   };\r\n\r\n//   // Build the form payload (used if not file-upload).\r\n//   const buildFormPayload = () => {\r\n//     const payload = {};\r\n//     formFields.forEach(field => {\r\n//       // For non-submit fields, gather values from the DOM. In a real app, use controlled components.\r\n//       if (field.id !== 'submit') {\r\n//         const el = document.getElementById(field.id);\r\n//         if (el) payload[field.id] = el.value;\r\n//       }\r\n//     });\r\n//     payload.organization_id = organizationId;\r\n//     return payload;\r\n//   };\r\n\r\n//   // Robust submit function that handles file fields.\r\n//   const submitForm = async () => {\r\n//     try {\r\n//       let response;\r\n//       const hasFileField = formFields.some(field => field.id === 'file');\r\n//       if (hasFileField) {\r\n//         // Build FormData object for file uploads.\r\n//         const formData = new FormData();\r\n//         formFields.forEach(field => {\r\n//           const el = document.getElementById(field.id);\r\n//           if (el) {\r\n//             if (field.id === 'file') {\r\n//               if (el.files && el.files.length) {\r\n//                 Array.from(el.files).forEach(file => formData.append(field.id, file));\r\n//                 if (field.options.acceptedFiles) {\r\n//                   formData.append(`${field.id}_acceptedFiles`, field.options.acceptedFiles.join(','));\r\n//                 }\r\n//                 if (field.options.maxFiles) {\r\n//                   formData.append(`${field.id}_maxFiles`, field.options.maxFiles);\r\n//                 }\r\n//               }\r\n//             } else {\r\n//               formData.append(field.id, el.value);\r\n//             }\r\n//           }\r\n//         });\r\n//         formData.append('organization_id', organizationId);\r\n//         response = await request.post(userCreateUrl, {\r\n//           method: 'POST',\r\n//           headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n//           body: formData\r\n//         });\r\n//       } else {\r\n//         // Otherwise send as JSON.\r\n//         const payload = buildFormPayload();\r\n//         response = await request.post(userCreateUrl, {\r\n//           method: 'POST',\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//             Authorization: `Bearer ${localStorage.getItem('token')}`\r\n//           },\r\n//           body: JSON.stringify(payload)\r\n//         });\r\n//       }\r\n//       if (!response.ok) {\r\n//         const errorData = await response.json();\r\n//         throw new Error(errorData.detail || 'Submission failed');\r\n//       }\r\n//       alert('Form submitted successfully!');\r\n//     } catch (error) {\r\n//       console.error('Submit Form Error:', error);\r\n//       alert(error.message);\r\n//     }\r\n//   };\r\n\r\n//   // Handle save form design.\r\n//   const handleSaveForm = async () => {\r\n//     // Ensure the submit field is part of the design.\r\n//     const fieldsWithSubmit = ensureSubmitField(formFields);\r\n//     // Package the design as JSON.\r\n//     const formDesign = {\r\n//       fields: fieldsWithSubmit,\r\n//       // The submitCode is NOT compiled on the frontend.\r\n//       // Instead, the backend will precompile the dynamic submit code and embed it.\r\n//       submitCode: \"\"\r\n//     };\r\n//     try {\r\n//       const res = await request.post('/dashboards/dashboards', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json', \r\n//           Authorization: `Bearer ${localStorage.getItem('token')}`\r\n//         },\r\n//         body: JSON.stringify({ organization_id: organizationId, form_design: formDesign })\r\n//       });\r\n//       if (!res.ok) throw new Error('Error saving form design');\r\n//       onSaveSuccess();\r\n//       onClose();\r\n//     } catch (error) {\r\n//       console.error('Error saving form design:', error);\r\n//       alert(error.message);\r\n//     }\r\n//   };\r\n\r\n  \r\n\r\n//   return (\r\n//     <div className=\"modal-overlay\">\r\n//       <div className=\"modal-content\">\r\n//         <h2>Form Builder</h2>\r\n//         <div className=\"builder-container\">\r\n//           <div className=\"field-palette\">\r\n//             <h3>Available Fields</h3>\r\n//             <DragDropContext onDragEnd={onDragEnd}>\r\n//               <Droppable droppableId=\"availableFields\">\r\n//                 {(provided) => (\r\n//                   <div ref={provided.innerRef} {...provided.droppableProps}>\r\n//                     {availableFields.map((field, index) => (\r\n//                       <Draggable key={field.id} draggableId={field.id} index={index}>\r\n//                         {(provided) => (\r\n//                           <div className=\"field-item\"\r\n//                             ref={provided.innerRef}\r\n//                             {...provided.draggableProps}\r\n//                             {...provided.dragHandleProps}>\r\n//                             {field.label}\r\n//                           </div>\r\n//                         )}\r\n//                       </Draggable>\r\n//                     ))}\r\n//                     {provided.placeholder}\r\n//                   </div>\r\n//                 )}\r\n//               </Droppable>\r\n//             </DragDropContext>\r\n//           </div>\r\n\r\n//           <div className=\"form-builder\">\r\n//             <h3>Your Form</h3>\r\n//             <DragDropContext onDragEnd={onDragEnd}>\r\n//               <Droppable droppableId=\"formBuilder\">\r\n//                 {(provided) => (\r\n//                   <div ref={provided.innerRef} {...provided.droppableProps}>\r\n//                     {formFields.map((field, index) => (\r\n//                       <motion.div\r\n//                       key={index}\r\n//                       className=\"form-field\"\r\n//                       initial={{ opacity: 0, y: 10 }}\r\n//                       animate={{ opacity: 1, y: 0 }}\r\n//                       transition={{ duration: 0.2 }}\r\n//                     >\r\n//                        <div className=\"field-display\">\r\n//                           <strong>{field.label}</strong>\r\n//                         </div>\r\n//                         <FieldConfiguration\r\n//                           field={field}\r\n//                           index={index}\r\n//                           onFieldUpdate={updateField}\r\n//                         />\r\n//                       </motion.div>\r\n//                     ))}\r\n//                       {provided.placeholder}\r\n//                   </div>\r\n//                 )}\r\n//               </Droppable>\r\n//             </DragDropContext>\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"modal-actions\">\r\n//           <button onClick={handleSaveForm}>Save Form Design</button>\r\n//           <button onClick={onClose}>Cancel</button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CreateUserFormBuilderBuilder;\r\n"
        }
    ]
}