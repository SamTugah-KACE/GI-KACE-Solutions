{
    "sourceFile": "src/components/snr_management/AddUserForm.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756834834018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756834834018,
            "name": "Commit-0",
            "content": "\r\n\r\n// src/components/AddUserForm.jsx\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport './AddUserForm.css';\r\nimport request from '../request';\r\nimport { toast } from 'react-toastify';\r\nimport AddRoleModal from './AddRoleModal';\r\nimport { mapEmployeeFields } from '../utils/mappingUtil';\r\nimport CompiledFormRenderer from './CompiledFormRenderer';\r\n\r\n\r\n/**\r\n * Helper function to split an array into chunks.\r\n */\r\nconst chunkArray = (arr, size) => {\r\n  const chunks = [];\r\n  for (let i = 0; i < arr.length; i += size) {\r\n    chunks.push(arr.slice(i, i + size));\r\n  }\r\n  return chunks;\r\n};\r\n\r\n/**\r\n * Custom hook to fetch and cache department options.\r\n */\r\nconst useDepartments = (organizationId) => {\r\n  const [departments, setDepartments] = useState([]);\r\n  useEffect(() => {\r\n    const fetchDepartments = async () => {\r\n      try {\r\n        const res = await request.get(\r\n          `/organizations/${organizationId}/departments?skip=0&limit=100`\r\n        );\r\n        const data = res.data;\r\n        if (Array.isArray(data)) {\r\n          setDepartments(data);\r\n        } else if (data.departments) {\r\n          setDepartments(data.departments);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching departments:\", error);\r\n      }\r\n    };\r\n    fetchDepartments();\r\n  }, [organizationId]);\r\n  return departments;\r\n};\r\n\r\n\r\n\r\n/**\r\n * Normalizes a key: lowercases it, trims spaces, and removes punctuation.\r\n */\r\nconst normalizeKey = (key) => {\r\n  return key.trim().toLowerCase().replace(/[^\\w\\s]/g, \"\");\r\n};\r\n\r\n\r\n/**\r\n * Merges contact-related fields into the \"contact_info\" key.\r\n */\r\nconst mergeContactInfoFields = (data) => {\r\n  const contactInfo = data.contact_info && typeof data.contact_info === \"object\" \r\n        ? { ...data.contact_info } : {};\r\n  const keysToMerge = Object.keys(data).filter(k => {\r\n    const norm = normalizeKey(k);\r\n    return (norm.includes(\"phone\") || norm.includes(\"address\")) && !norm.includes(\"next of kin\");\r\n  });\r\n  keysToMerge.forEach(k => {\r\n    contactInfo[k] = data[k];\r\n    delete data[k];\r\n  });\r\n  data.contact_info = contactInfo;\r\n  return data;\r\n};\r\n\r\n/**\r\n * Renders a field based on its type.\r\n * – For fields whose label contains \"department\" (case-insensitive), renders a dynamic dropdown.\r\n * – For radio and checkbox fields, renders horizontal layout if ≤3 options; otherwise wraps.\r\n * – For role_select fields, if roles are loading, shows a loading message.\r\n * – The submit field is not rendered.\r\n */\r\nconst renderField = (\r\n  field,\r\n  fieldValue,\r\n  handleChange,\r\n  organizationId,\r\n  roleOptions,\r\n  departments,\r\n  openAddRole,\r\n  isRolesLoading\r\n) => {\r\n  if (/department/i.test(field.label)) {\r\n    return (\r\n      <select name={field.label} value={fieldValue || \"\"} onChange={handleChange}>\r\n        <option value=\"\">Select a Department</option>\r\n        {departments.map(dep => (\r\n          <option key={dep.id} value={dep.id}>\r\n            {dep.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    );\r\n  }\r\n  switch (field.id) {\r\n    case 'radio': {\r\n      if (field.options?.choices && field.options.choices.length > 0) {\r\n        const layoutClass = field.options.choices.length <= 3 ? 'options-horizontal' : 'options-group';\r\n        return (\r\n          <div className={layoutClass}>\r\n            {field.options.choices.map((choice, idx) => (\r\n              <label key={idx} className=\"option-label\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name={field.label}\r\n                  value={choice}\r\n                  checked={fieldValue === choice}\r\n                  onChange={handleChange}\r\n                />\r\n                {choice}\r\n              </label>\r\n            ))}\r\n          </div>\r\n        );\r\n      }\r\n      return <span className=\"no-options\">No options available</span>;\r\n    }\r\n    case 'checkbox': {\r\n      if (field.options?.choices && field.options.choices.length > 0) {\r\n        const values = Array.isArray(fieldValue) ? fieldValue : [];\r\n        const layoutClass = field.options.choices.length <= 3 ? 'options-horizontal' : 'options-group';\r\n        return (\r\n          <div className={layoutClass}>\r\n            {field.options.choices.map((choice, idx) => (\r\n              <label key={idx} className=\"option-label\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  name={field.label}\r\n                  value={choice}\r\n                  checked={values.includes(choice)}\r\n                  onChange={(e) => {\r\n                    const checked = e.target.checked;\r\n                    let newValues = [...values];\r\n                    if (checked) newValues.push(choice);\r\n                    else newValues = newValues.filter(v => v !== choice);\r\n                    handleChange({\r\n                      target: { name: field.label, value: newValues, type: 'checkbox' },\r\n                    });\r\n                  }}\r\n                />\r\n                {choice}\r\n              </label>\r\n            ))}\r\n          </div>\r\n        );\r\n      }\r\n      return <span className=\"no-options\">No options available</span>;\r\n    }\r\n    case 'select':\r\n    case 'role_select': {\r\n      if (field.id === 'role_select' && isRolesLoading) {\r\n        return <span>Loading roles…</span>;\r\n      }\r\n      const options =\r\n        field.id === 'role_select'\r\n          ? roleOptions || []\r\n          : (field.options?.choices || []).map(choice => ({ id: choice, name: choice }));\r\n      return (\r\n        <select\r\n          name={field.label}\r\n          value={fieldValue || \"\"}\r\n          onChange={(e) => {\r\n            const selected = e.target.value;\r\n            if (field.id === 'role_select' && selected === '__add_new_role__') {\r\n              openAddRole();\r\n            } else {\r\n              handleChange(e);\r\n            }\r\n          }}\r\n        >\r\n          <option value=\"\">Select an option</option>\r\n          {options.map((option, idx) => (\r\n            <option key={option.id || idx} value={option.id || option.name}>\r\n              {option.name !== undefined ? option.name : option}\r\n            </option>\r\n          ))}\r\n          {/* {field.id === 'role_select' && (\r\n            <option value=\"__add_new_role__\">Add New Role</option>\r\n          )} */}\r\n        </select>\r\n      );\r\n    }\r\n    case 'file': {\r\n      return (\r\n        <input type=\"file\" name={field.label} multiple onChange={handleChange} />\r\n      );\r\n    }\r\n    case 'submit': {\r\n     return (\r\n      <button type=\"submit\" className=\"submit-button\">\r\n        Add New User\r\n      </button>\r\n     );\r\n      // Do not render any submit control from design. The modal actions handle submission.\r\n      // return null;\r\n    }\r\n    default: {\r\n      return (\r\n        <input\r\n          type={field.id === 'number' ? 'number' : field.id}\r\n          name={field.label}\r\n          placeholder={field.label}\r\n          value={fieldValue || ''}\r\n          onChange={handleChange}\r\n        />\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nconst AddUserForm = ({ organizationId, userId, onClose, onUserAdded }) => {\r\n  const [formDesign, setFormDesign] = useState(null);\r\n  // Use field labels as keys for independent control.\r\n  const [fieldValues, setFieldValues] = useState({});\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [steps, setSteps] = useState([]);\r\n  const [showAddRoleModal, setShowAddRoleModal] = useState(false);\r\n  const [roleOptions, setRoleOptions] = useState([]);\r\n  const departments = useDepartments(organizationId);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isRolesLoading, setIsRolesLoading] = useState(true);\r\n\r\n  // --- WebSocket: Fetch precompiled form design ---\r\n  useEffect(() => {\r\n    const wsUrl = `wss://staff-records-backend.onrender.com/ws/form-design/${organizationId}/${userId}`;\r\n    const ws = new WebSocket(wsUrl);\r\n    let timeoutId = setTimeout(() => {\r\n      toast.error(\"Form design load timeout. Please try again later.\");\r\n      setIsLoading(false);\r\n    }, 10000); // 10-second timeout\r\n    ws.onopen = () => console.info(\"WebSocket connected to form-design endpoint.\");\r\n    ws.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        setFormDesign(data.formDesign);\r\n        \r\n        // Check if this is a compiled form (has html, css, js properties)\r\n        const isCompiledForm = data.formDesign?.html && data.formDesign?.css && data.formDesign?.js;\r\n        \r\n        if (isCompiledForm) {\r\n          console.log(\"Compiled form detected:\", data.formDesign);\r\n          // For compiled forms, we don't need to set up the traditional form state\r\n          // The CompiledFormRenderer will handle everything\r\n        } else if (data.formDesign?.fields && data.formDesign.fields.length > 0) {\r\n          // Traditional form setup for non-compiled forms\r\n          const initValues = {};\r\n          data.formDesign.fields.forEach((field) => {\r\n            // Use field.label as the unique key; for checkboxes initialize as an array.\r\n            initValues[field.label] = field.id === 'checkbox' ? [] : '';\r\n          });\r\n          setFieldValues(initValues);\r\n          if (data.formDesign.fields.length > 4) {\r\n            setSteps(chunkArray(data.formDesign.fields, 4));\r\n            setCurrentStep(0);\r\n          } else {\r\n            setSteps([data.formDesign.fields]);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error parsing form design:\", error);\r\n      } finally {\r\n        setIsLoading(false);\r\n        clearTimeout(timeoutId);\r\n      }\r\n    };\r\n    ws.onerror = (error) => {\r\n      console.error(\"WebSocket error:\", error);\r\n      setFormDesign({ fields: [] });\r\n      setIsLoading(false);\r\n      clearTimeout(timeoutId);\r\n    };\r\n    ws.onclose = () => {\r\n      console.info(\"WebSocket closed.\");\r\n      setIsLoading(false);\r\n      clearTimeout(timeoutId);\r\n    };\r\n    return () => {\r\n      clearTimeout(timeoutId);\r\n      ws.close();\r\n    };\r\n  }, [organizationId, userId]);\r\n\r\n  // --- Fetch role options ---\r\n  useEffect(() => {\r\n    const fetchRoles = async () => {\r\n      try {\r\n        const res = await request.get(`/fetch?organization_id=${organizationId}&skip=0&limit=100`);\r\n        const data = res.data;\r\n        if (data) {\r\n          setRoleOptions(data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching roles:\", error);\r\n      } finally {\r\n        setIsRolesLoading(false);\r\n      }\r\n    };\r\n    fetchRoles();\r\n  }, [organizationId]);\r\n\r\n  // Controlled input handler.\r\n  const handleInputChange = useCallback((e) => {\r\n    const { name, value, type } = e.target;\r\n    const newVal = type === 'file' ? e.target.files : value;\r\n    setFieldValues((prev) => ({ ...prev, [name]: newVal }));\r\n  }, []);\r\n\r\n  const openAddRole = () => {\r\n    setShowAddRoleModal(true);\r\n  };\r\n\r\n    // Validate individual step (non-empty)\r\n  const validateStep = () => {\r\n    const fields = steps[currentStep];\r\n    return fields.every(fld => {\r\n      const val = fieldValues[fld.label];\r\n      if (fld.required) {\r\n        if (fld.id === 'file') return val?.length > 0;\r\n        return val !== undefined && val.toString().trim() !== '';\r\n      }\r\n      return true;\r\n    });\r\n  };\r\n\r\n  // --- Submission: Map field keys using helper functions and build payload. ---\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    //  if (!validateStep()) {\r\n    //   toast.error('Please fill all required fields on this page.');\r\n    //   return;\r\n    // }\r\n    if (!formDesign || !formDesign.fields || formDesign.fields.length === 0) {\r\n      toast.info(\"No form design available. Please contact your administrator.\");\r\n      return;\r\n    }\r\n    console.log(\"Field Values: \", fieldValues);\r\n    console.log(\"Form Design: \", formDesign);\r\n    console.log(\"Organization ID: \", organizationId);\r\n    console.log(\"User ID: \", userId);\r\n    console.log(\"\\n\\n\\nsubmitUrl: \", formDesign.submitUrl);\r\n    try {\r\n      let response;\r\n      // First, map the dynamic keys (field labels) to canonical keys.\r\n      const mappedData = mapEmployeeFields(fieldValues);\r\n      const payloadData = mergeContactInfoFields(mappedData);\r\n      payloadData.organization_id = organizationId;\r\n\r\n      // Merge any contact-related fields into a unified object.\r\n    // payloadData = { organization_id: organizationId, ...mappedData };\r\n      console.log(\"Mapped Payload Data: \", payloadData);\r\n      // Remove any unwanted fields from the payload.\r\n      // For example, if the form design has a submit field, remove it from the payload.\r\n      //if payloadData has Submit Button as part of the payload to be sent to the server, remove it.\r\n\r\n\r\n      // if (payloadData.submit || payloadData[\"Submit Button\"]) {\r\n        delete payloadData.submit;\r\n        delete payloadData['Submit Button'];\r\n      // }\r\n      console.log(\"Payload Data: \", payloadData);\r\n\r\n      // Use FormData if there is a file field.\r\n      const hasFileField = formDesign.fields.some(field => field.id === 'file');\r\n      if (hasFileField) {\r\n        const formData = new FormData();\r\n        Object.entries(payloadData).forEach(([key, val]) => {\r\n          if (val instanceof FileList) {\r\n            Array.from(val).forEach(file => formData.append(key, file));\r\n          } else {\r\n            formData.append(key, val);\r\n          }\r\n        });\r\n\r\n\r\n         // ** Tenant-mandated fields enforcement **\r\n    //  - first name: any label matching /(first|given)/i\r\n    //  - middle name: /middle/i\r\n    //  - last name: /(last|surname|family)/i\r\n    //  - email: fld.id==='email'\r\n    //  - role: fld.id==='role_select'\r\n    const fldInfo = formDesign.fields.map(f => ({\r\n      id: f.id,\r\n      label: f.label,\r\n      norm: f.label.toLowerCase()\r\n    }));\r\n\r\n    console.log(\"fldInfo:: \", fldInfo);\r\n\r\n    // const missing = [];\r\n    // if (!fldInfo.some(f => /(first|given)/i.test(f.norm) && payloadData[f.label]?.toString().trim()))\r\n    //   missing.push('First Name');\r\n    // if (!fldInfo.some(f => /middle/i.test(f.norm) && payloadData[f.label]?.toString().trim()))\r\n    //   missing.push('Middle Name');\r\n    // if (!fldInfo.some(f => /(last|surname|family)/i.test(f.norm) && payloadData[f.label]?.toString().trim()))\r\n    //   missing.push('Last Name');\r\n    // if (!fldInfo.some(f => f.id === 'email' && payloadData[f.label]?.toString().trim()))\r\n    //   missing.push('Email');\r\n    // if (!fldInfo.some(f => f.id === 'role_select' && payloadData[f.label]?.toString().trim()))\r\n    //   missing.push('Role');\r\n\r\n    // if (missing.length) {\r\n    //   toast.error(`Missing required fields: ${missing.join(', ')}`);\r\n    //   return;\r\n    // }\r\n\r\n        formData.append('organization_id', organizationId);\r\n        response = await request.post('/users/create', formData);\r\n      } else {\r\n        // const payload = { organization_id: organizationId };\r\n        // Object.entries(payloadData).forEach(([label, value]) => {\r\n        //   payload[label] = value;\r\n        // });\r\n        // response = await request.post(formDesign.submitUrl || '/users/create', JSON.stringify(payloadData));\r\n        response = await request.post('/users/create', JSON.stringify(payloadData));\r\n      }\r\n      if ( ![200, 201].includes(response.status)) {\r\n        const errorData = response.data;\r\n        throw new Error(errorData.detail || 'Submission failed');\r\n      }\r\n      // If the form design has embedded submit code, execute it.\r\n      // if (formDesign && formDesign.s ubmitCode) {\r\n      //   try {\r\n      //     const submitFunc = new Function(`\"use strict\"; return (${formDesign.submitCode})`)();\r\n      //     await submitFunc(fieldValues);\r\n      //   } catch (error) {\r\n      //     console.error(\"Submission error from submitCode:\", error);\r\n      //     toast.error(`Error executing submit code: ${error.message}`);\r\n      //   }\r\n      // }\r\n      onUserAdded();\r\n      onClose();\r\n    } catch (error) {\r\n      console.error(\"Submit Form Error:\", error);\r\n      toast.error(`${error.message}`);\r\n    }\r\n  };\r\n\r\n  const nextStep = () => validateStep() && setCurrentStep(prev => Math.min(prev + 1, steps.length - 1));\r\n  const prevStep = () => setCurrentStep(prev => Math.max(prev - 1, 0));\r\n\r\n  const renderFields = () => {\r\n    const fieldsToRender = steps[currentStep];\r\n    return fieldsToRender.map((field, index) => {\r\n      const key = `${currentStep}-${field.id}-${index}`;\r\n      return (\r\n        <div key={key} className=\"form-group\">\r\n          <label>{field.label}</label>\r\n          {renderField(\r\n            field,\r\n            fieldValues[field.label],\r\n            handleInputChange,\r\n            organizationId,\r\n            roleOptions,\r\n            departments,\r\n            openAddRole,\r\n            isRolesLoading\r\n          )}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  if (isLoading || isRolesLoading) {\r\n    return (\r\n      <div className=\"modal-overlay\">\r\n        <div className=\"modal-content\">\r\n          <p>Loading form…</p>\r\n          {/* Replace with a spinner graphic if desired */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  if (!formDesign || (!formDesign.fields && !formDesign.html)) {\r\n    return (\r\n      <div className=\"modal-overlay\">\r\n        <div className=\"modal-content\">\r\n          <p>No form design available. Please contact your administrator.</p>\r\n           <div className=\"modal-footer\">\r\n          <button onClick={onClose} className=\"footer-btn close-btn\">\r\n            Close\r\n          </button>\r\n        </div>\r\n        </div>\r\n       \r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Check if this is a compiled form (has html, css, js properties)\r\n  const isCompiledForm = formDesign?.html && formDesign?.css && formDesign?.js;\r\n  \r\n  if (isCompiledForm) {\r\n    return (\r\n      <CompiledFormRenderer\r\n        formDesign={formDesign}\r\n        organizationId={organizationId}\r\n        onClose={onClose}\r\n        onUserAdded={onUserAdded}\r\n        roleOptions={roleOptions}\r\n        departments={departments}\r\n      />\r\n    );\r\n  }\r\n\r\n  // Check if the precompiled design already contains a submit field.\r\n  const hasSubmitField = formDesign.fields.some(f => f.id === 'submit');\r\n  console.log(\"hasSubmitField: \", hasSubmitField);\r\n\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <div className=\"modal-content\">\r\n        <form onSubmit={handleSubmit}>\r\n          {renderFields()}\r\n          {steps.length > 1 && (\r\n            <div className=\"step-indicator\">\r\n              <span>Step {currentStep + 1} of {steps.length}</span>\r\n            </div>\r\n          )}\r\n          <div className=\"modal-actions\">\r\n            {steps.length > 1 && currentStep > 0 && (\r\n              <button type=\"button\" onClick={prevStep}>Back</button>\r\n            )}\r\n            {steps.length > 1 && currentStep < steps.length - 1 && (\r\n              <button type=\"button\" onClick={nextStep}>Next</button>\r\n            )}\r\n            {/* Render a submit button only if no submit field exists in the design */}\r\n            {!hasSubmitField && (steps.length <= 1 || currentStep === steps.length - 1) && (\r\n              <button type=\"submit\">Submit</button>\r\n            )}\r\n            {/* <button type=\"submit\">Add User</button> */}\r\n            <button type=\"button\" onClick={onClose}>Cancel</button>\r\n          </div>\r\n        </form>\r\n        {showAddRoleModal && (\r\n          <AddRoleModal\r\n            organizationId={organizationId}\r\n            onClose={() => setShowAddRoleModal(false)}\r\n            onRoleAdded={(newRole) => {\r\n              setRoleOptions(prev => [...prev, newRole]);\r\n              setFieldValues(prev => ({ ...prev, role_select: newRole.id }));\r\n              setShowAddRoleModal(false);\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddUserForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
        }
    ]
}